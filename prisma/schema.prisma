// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String    @id @default(uuid()) @db.Uuid
  userId             String    @db.Uuid
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  role          String    @default("user")
  orders        Order[]
  cart          Cart?
  addresses     Address[]
  reviews       Review[]
  gender        String? // Optional field for gender
  birthday      String? // Optional field for birthday (String format)
  location      String? // Optional field for location
  friends       Json?     @db.JsonB // Using jsonb for friends/connections
  guilds        Json?     @db.JsonB // Using jsonb for guild memberships
}

model VerificationRequest {
  id         String   @id @default(uuid()) @db.Uuid
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Category {
  id            String     @id @default(uuid()) @db.Uuid
  name          String     @unique
  description   String?
  imageUrl      String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  parentId      String?    @db.Uuid
  parent        Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  subcategories Category[]  @relation("CategoryParent")
  products      Product[]
  tags          String[]

  @@index([name])
  @@index([imageUrl])
  @@index([name, imageUrl])
}

model Product {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  description String?       @db.Text
  price       Int
  imageUrls   String[]
  stock       Int
  barcode     String?       @unique // Barcode field, optional and unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  categoryId  String?       @db.Uuid
  category    Category?     @relation(fields: [categoryId], references: [id])
  tags        String[]
  keyFeatures String[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     Review[]
  brand       String?
  status      ProductStatus @default(ACTIVE)

  // Dimensions (Optional)
  length Float?
  width  Float?
  height Float?
  weight Float?

  @@index([name])
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

model Order {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @db.Uuid
  user        User        @relation(fields: [userId], references: [id])
  status      OrderStatus
  totalAmount Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        String  @id @default(uuid()) @db.Uuid
  orderId   String  @db.Uuid
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.Uuid
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Int

  @@index([orderId])
  @@index([productId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  DISPATCHED
  DELIVERED
  CANCELED
}

model Cart {
  id        String     @id @default(uuid()) @db.Uuid
  userId    String     @unique @db.Uuid
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]

  @@index([userId])
}

model CartItem {
  id        String  @id @default(uuid()) @db.Uuid
  cartId    String  @db.Uuid
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String  @db.Uuid
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Int

  @@index([cartId])
  @@index([productId])
}

model Address {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
  fullName    String
  phoneNumber String
  wilaya      String
  commune     String
  address     String
  isPrimary   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Review {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.Uuid
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}
