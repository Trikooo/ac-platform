// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// ------------------------------
// CONFIGURATION
// ------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("NEON_POSTGRES_URL") // uses connection pooling
  directUrl = env("NEON_DIRECT_URL") // uses a direct connection
}

// ------------------------------
// AUTHENTICATION & USER MODELS
// ------------------------------

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  gender        String? // Optional field for gender
  birthday      String? // Optional field for birthday (String format)
  location      String? // Optional field for location
  friends       Json?     @db.JsonB // Using jsonb for friends/connections
  guilds        Json?     @db.JsonB // Using jsonb for guild memberships

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  Authenticator Authenticator[]
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  cart          Cart?
  addresses     Address[]
  reviews       Review[]
  role          UserRole        @default(USER)
  Feedback      Feedback[]
}

model Account {
  userId             String  @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token        String?
  oauth_token_secret String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  MOD
  USER
}

model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String
  userId               String  @db.Uuid
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@unique([credentialID])
}

// ------------------------------
// PRODUCT & CATEGORY MODELS
// ------------------------------

model Category {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String?
  imageUrl    String
  tags        String[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  parentId      String?    @db.Uuid
  parent        Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryParent")
  products      Product[]

  @@index([name])
  @@index([imageUrl])
  @@index([name, imageUrl])
}

model Product {
  id            String        @id @default(uuid()) @db.Uuid
  name          String
  description   String?       @db.Text
  originalPrice Int
  price         Int
  imageUrls     String[]
  stock         Int
  barcode       String?       @unique
  brand         String?
  status        ProductStatus @default(ACTIVE)
  tags          String[]
  keyFeatures   String[]
  featured      Boolean       @default(false)

  // Dimensions
  length Float?
  width  Float?
  height Float?
  weight Float?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  categoryId String?     @db.Uuid
  category   Category?   @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  cartItems  CartItem[]
  reviews    Review[]

  @@index([name])
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

// ------------------------------
// ORDER & CART MODELS
// ------------------------------

model Order {
  id             String      @id @default(uuid()) @db.Uuid
  status         OrderStatus
  subtotalAmount Int
  totalAmount    Int
  guestAddress   Json?
  shippingPrice  Int

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String?     @db.Uuid
  user      User?       @relation(fields: [userId], references: [id])
  items     OrderItem[] @relation("OrderToOrderItems")
  addressId String?     @db.Uuid
  address   Address?    @relation(fields: [addressId], references: [id], onDelete: Restrict)
  tracking  Tracking[]

  @@index([userId])
}

model OrderItem {
  id         String  @id @default(uuid()) @db.Uuid
  quantity   Int
  price      Int
  noestReady Boolean @default(false)

  // Relations
  orderId    String    @db.Uuid
  order      Order     @relation("OrderToOrderItems", fields: [orderId], references: [id], onDelete: Cascade)
  productId  String    @db.Uuid
  product    Product   @relation(fields: [productId], references: [id])
  trackingId String?   @db.Uuid
  tracking   Tracking? @relation("TrackingToOrderItems", fields: [trackingId], references: [id], onDelete: SetNull)

  @@index([orderId])
  @@index([productId])
}

model Tracking {
  id             String      @id @default(uuid()) @db.Uuid
  trackingNumber String      @unique
  trackingStatus OrderStatus
  // Timestamps
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  orderId    String      @db.Uuid
  order      Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderItems OrderItem[] @relation("TrackingToOrderItems")
}

enum OrderStatus {
  PENDING
  PROCESSING
  DISPATCHED
  DELIVERED
  CANCELLED
}

model Cart {
  id String @id @default(uuid()) @db.Uuid

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String     @unique @db.Uuid
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]

  @@index([userId])
}

model CartItem {
  id       String @id @default(uuid()) @db.Uuid
  quantity Int
  price    Int

  // Relations
  cartId    String  @db.Uuid
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String  @db.Uuid
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

// ------------------------------
// USER RELATED MODELS
// ------------------------------

model Address {
  id                String  @id @default(uuid()) @db.Uuid
  fullName          String
  phoneNumber       String
  secondPhoneNumber String?
  wilayaValue       String
  wilayaLabel       String
  commune           String
  stopDesk          Boolean
  stationCode       String?
  stationName       String?
  address           String
  baseShippingPrice Int

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String  @db.Uuid
  user   User    @relation(fields: [userId], references: [id])
  Order  Order[]

  // Archived flag for soft deletion
  archived Boolean @default(false)

  @@unique([wilayaValue, commune, address, userId, fullName, phoneNumber])
  @@index([userId])
}

model Review {
  id      String  @id @default(uuid()) @db.Uuid
  rating  Int
  comment String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String  @db.Uuid
  user      User    @relation(fields: [userId], references: [id])
  productId String  @db.Uuid
  product   Product @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

model Feedback {
  id        String  @id @default(uuid()) @db.Uuid
  sentiment String // e.g., "Negative", "Neutral", "Positive"
  message   String? @db.Text // Optional detailed feedback message

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String? @db.Uuid
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model CarouselItem {
  id           String   @id @default(uuid()) @db.Uuid
  imageUrl     String
  link         String
  title        String // alt and title for the slide.
  displayIndex Int      @unique // To control the sequence of slides
  isActive     Boolean  @default(true) // To enable/disable slides without deletion
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
